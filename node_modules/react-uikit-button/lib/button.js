'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactUikitBase = require('react-uikit-base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Button = function Button(props) {
  // CSS classes
  var context = {
    primary: ' uk-button-primary',
    success: ' uk-button-success',
    danger: ' uk-button-danger',
    link: ' uk-button-link'
  };

  var size = {
    mini: ' uk-button-mini',
    small: ' uk-button-small',
    large: ' uk-button-large'
  };

  var cssClassNames = _reactUikitBase.helpers.cleanClasses(['uk-button', props.classes, props.block ? 'uk-width-1-1' : null, props.context ? context[props.context] : null, props.size ? size[props.size] : null, props.className]);

  // Remove non valid html attributes
  var ignoreProps = ['body', 'block', 'children', 'classes', 'context', 'kitid', 'size', 'type'];

  var cleanProps = _reactUikitBase.helpers.cleanProps(ignoreProps)(props);

  // Elements
  var attr = _extends({}, cleanProps, (0, _reactUikitBase.events)(props), {
    'data-kitid': props.kitid
  });

  var type = {
    button: _react2.default.createElement(
      'button',
      _extends({}, attr, {
        className: cssClassNames,
        type: props.type || 'button',
        disabled: props.disabled
      }),
      props.body,
      props.children
    ),

    close: _react2.default.createElement('a', _extends({}, attr, {
      className: 'uk-close ' + cssClassNames,
      href: '#'
    })),

    link: _react2.default.createElement(
      'a',
      _extends({}, attr, {
        className: cssClassNames,
        href: '#',
        role: 'button'
      }),
      props.body,
      props.children
    )
  };

  // Return Component
  return type.submit ? type['button'] : type[props.type] || type['button'];
};

Button.propTypes = {
  body: _react2.default.PropTypes.string,
  block: _react2.default.PropTypes.bool,
  children: _react2.default.PropTypes.any,
  classes: _react2.default.PropTypes.array,
  className: _react2.default.PropTypes.string,
  context: _react2.default.PropTypes.oneOf(['primary', 'success', 'danger', 'link']),
  disabled: _react2.default.PropTypes.bool,
  kitid: _react2.default.PropTypes.string,
  size: _react2.default.PropTypes.oneOf(['mini', 'small', 'large']),
  type: _react2.default.PropTypes.oneOf(['button', 'close', 'link', 'submit'])
};

exports.default = (0, _reactUikitBase.base)(Button);